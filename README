关于ependingpool
~~~~~~~~~~

使用epoll的pendingpool
pengingpool是一个TCP连接池，相当于为TCP连接提供一个缓冲区.

ependingpool使用了epool模型，运行需要2.6内核环境下.
在2.4内核下可以编译通过，不过不能运行，需要在2.6内核下运行

在遇到大量socket的时候程序需要使用ulimit方式启动
使用长连接的时候请注意要使用TCP_NODELAY


使用方法
~~~~~~~~
这里只演示了经典的生产者消费者的模型，具体的例子可以参考test里的样例和http://com.baidu.com/twiki/bin/view/Main/Libependingpool下的文档说明

初始化:
  //设置可存储socket的数量, 默认500
	g_workpool.set_sock_num(1000);
	//设置已就绪队列的长度, 默认100
	g_workpool.set_queue_len(300);
  //以上两个参数设置后就不要进行修改
  
  //设置epoll的监听等待时间(ms), 默认为10ms
	g_workpool.set_epoll_timeo(50);	
	//设置socket等待超时时间(秒), 默认为1s
	g_workpool.set_conn_timeo(2);	
	
  //先设置监听线程:
   g_workpool.set_listen_fd(listen_sd);
 
   while (1) {
 	    //监视socket, check_item监视socket，并放入处理队列，等待工作线程进行处理
       g_workpool.check_item();
   }
   
  设置工作线程：
  while (1) {
       //从已就绪的队列中中取一个已建立好的连接
       if (g_workpool.fetch_item(&handle, &client) != 0)
       	continue;
   	   do_somthing(client);
           
       //false短连接关闭,长连接使用g_workpool.reset_item(offset, true);
       g_workpool.reset_item(offset, false);
  }

  新版本的ependingpool中增加了对于读写，超时等事件设置回调函数的机制, 配合非堵塞IO可以模拟异步IO读写


反馈建议
~~~~~~~~
有任何反馈及建议，请发送邮件到 com@baidu.com或者com-dev@baidu.com
